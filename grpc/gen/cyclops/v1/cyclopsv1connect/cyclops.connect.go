// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: cyclops/v1/cyclops.proto

package cyclopsv1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/guycole/daring-cyclops/grpc/gen/cyclops/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// CyclopsServiceName is the fully-qualified name of the CyclopsService service.
	CyclopsServiceName = "cyclops.v1.CyclopsService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// CyclopsServiceGameCatalogProcedure is the fully-qualified name of the CyclopsService's
	// GameCatalog RPC.
	CyclopsServiceGameCatalogProcedure = "/cyclops.v1.CyclopsService/GameCatalog"
	// CyclopsServicePingProcedure is the fully-qualified name of the CyclopsService's Ping RPC.
	CyclopsServicePingProcedure = "/cyclops.v1.CyclopsService/Ping"
	// CyclopsServicePlayerNewProcedure is the fully-qualified name of the CyclopsService's PlayerNew
	// RPC.
	CyclopsServicePlayerNewProcedure = "/cyclops.v1.CyclopsService/PlayerNew"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	cyclopsServiceServiceDescriptor           = v1.File_cyclops_v1_cyclops_proto.Services().ByName("CyclopsService")
	cyclopsServiceGameCatalogMethodDescriptor = cyclopsServiceServiceDescriptor.Methods().ByName("GameCatalog")
	cyclopsServicePingMethodDescriptor        = cyclopsServiceServiceDescriptor.Methods().ByName("Ping")
	cyclopsServicePlayerNewMethodDescriptor   = cyclopsServiceServiceDescriptor.Methods().ByName("PlayerNew")
)

// CyclopsServiceClient is a client for the cyclops.v1.CyclopsService service.
type CyclopsServiceClient interface {
	GameCatalog(context.Context, *connect.Request[v1.GameCatalogRequest]) (*connect.Response[v1.GameCatalogResponse], error)
	Ping(context.Context, *connect.Request[v1.PingRequest]) (*connect.Response[v1.PingResponse], error)
	PlayerNew(context.Context, *connect.Request[v1.PlayerNewRequest]) (*connect.Response[v1.PlayerNewResponse], error)
}

// NewCyclopsServiceClient constructs a client for the cyclops.v1.CyclopsService service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewCyclopsServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) CyclopsServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &cyclopsServiceClient{
		gameCatalog: connect.NewClient[v1.GameCatalogRequest, v1.GameCatalogResponse](
			httpClient,
			baseURL+CyclopsServiceGameCatalogProcedure,
			connect.WithSchema(cyclopsServiceGameCatalogMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		ping: connect.NewClient[v1.PingRequest, v1.PingResponse](
			httpClient,
			baseURL+CyclopsServicePingProcedure,
			connect.WithSchema(cyclopsServicePingMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		playerNew: connect.NewClient[v1.PlayerNewRequest, v1.PlayerNewResponse](
			httpClient,
			baseURL+CyclopsServicePlayerNewProcedure,
			connect.WithSchema(cyclopsServicePlayerNewMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// cyclopsServiceClient implements CyclopsServiceClient.
type cyclopsServiceClient struct {
	gameCatalog *connect.Client[v1.GameCatalogRequest, v1.GameCatalogResponse]
	ping        *connect.Client[v1.PingRequest, v1.PingResponse]
	playerNew   *connect.Client[v1.PlayerNewRequest, v1.PlayerNewResponse]
}

// GameCatalog calls cyclops.v1.CyclopsService.GameCatalog.
func (c *cyclopsServiceClient) GameCatalog(ctx context.Context, req *connect.Request[v1.GameCatalogRequest]) (*connect.Response[v1.GameCatalogResponse], error) {
	return c.gameCatalog.CallUnary(ctx, req)
}

// Ping calls cyclops.v1.CyclopsService.Ping.
func (c *cyclopsServiceClient) Ping(ctx context.Context, req *connect.Request[v1.PingRequest]) (*connect.Response[v1.PingResponse], error) {
	return c.ping.CallUnary(ctx, req)
}

// PlayerNew calls cyclops.v1.CyclopsService.PlayerNew.
func (c *cyclopsServiceClient) PlayerNew(ctx context.Context, req *connect.Request[v1.PlayerNewRequest]) (*connect.Response[v1.PlayerNewResponse], error) {
	return c.playerNew.CallUnary(ctx, req)
}

// CyclopsServiceHandler is an implementation of the cyclops.v1.CyclopsService service.
type CyclopsServiceHandler interface {
	GameCatalog(context.Context, *connect.Request[v1.GameCatalogRequest]) (*connect.Response[v1.GameCatalogResponse], error)
	Ping(context.Context, *connect.Request[v1.PingRequest]) (*connect.Response[v1.PingResponse], error)
	PlayerNew(context.Context, *connect.Request[v1.PlayerNewRequest]) (*connect.Response[v1.PlayerNewResponse], error)
}

// NewCyclopsServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewCyclopsServiceHandler(svc CyclopsServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	cyclopsServiceGameCatalogHandler := connect.NewUnaryHandler(
		CyclopsServiceGameCatalogProcedure,
		svc.GameCatalog,
		connect.WithSchema(cyclopsServiceGameCatalogMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	cyclopsServicePingHandler := connect.NewUnaryHandler(
		CyclopsServicePingProcedure,
		svc.Ping,
		connect.WithSchema(cyclopsServicePingMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	cyclopsServicePlayerNewHandler := connect.NewUnaryHandler(
		CyclopsServicePlayerNewProcedure,
		svc.PlayerNew,
		connect.WithSchema(cyclopsServicePlayerNewMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/cyclops.v1.CyclopsService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case CyclopsServiceGameCatalogProcedure:
			cyclopsServiceGameCatalogHandler.ServeHTTP(w, r)
		case CyclopsServicePingProcedure:
			cyclopsServicePingHandler.ServeHTTP(w, r)
		case CyclopsServicePlayerNewProcedure:
			cyclopsServicePlayerNewHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedCyclopsServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedCyclopsServiceHandler struct{}

func (UnimplementedCyclopsServiceHandler) GameCatalog(context.Context, *connect.Request[v1.GameCatalogRequest]) (*connect.Response[v1.GameCatalogResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("cyclops.v1.CyclopsService.GameCatalog is not implemented"))
}

func (UnimplementedCyclopsServiceHandler) Ping(context.Context, *connect.Request[v1.PingRequest]) (*connect.Response[v1.PingResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("cyclops.v1.CyclopsService.Ping is not implemented"))
}

func (UnimplementedCyclopsServiceHandler) PlayerNew(context.Context, *connect.Request[v1.PlayerNewRequest]) (*connect.Response[v1.PlayerNewResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("cyclops.v1.CyclopsService.PlayerNew is not implemented"))
}
